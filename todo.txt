Tech to learn

	Python Bloomberg API
	Sphinx - Python
	TA-Lib - C++
	Pyfolio/Zipline - Python
	QuantLib - Cpp/Python
	Performance Analytics - R Package
	BQNT & BQL Documentation
	Carats library
	XBRL API
	Angular




Portfolio Management

	Work on factor allocation methods
	Look up how Django apps share a backend - can economic data be used in Portfolio Mgmt. can they share a db
	
	Portfolio Construction
		Initial Allocation
		Rebalance Operations
		Constraints
	
	Risk Analytics
		Informs Portfolio Construction
		Informs Performance Analytics
		
	Performance Analytics
		Informs Portfolio Construction


Economic Indicator Framework
	
	Economic Condition Simulator
		See how portfolios fare under simulated market conditions
		
		Market Stress Indicators
			Kansas City Paper - ask if I should dive into this deeper
	
	Workflow Design

		There is a conceptual and an implementation aspect.
		The conceptual is essentially the steps you would take whether you are programming or not. The implementation is how to do this in a programming environment or otherwise. I'm going to focus on the programming implementation for now since that's how I'm going to use it. It's more complicated, but more powerful.
	
		Go through Data sources for start and end date info
		Standard Descriptive Statistics and Visualizations
		Design workflow around JupyterLab
			CSS template, Markdown, Latex stuff... idk
		make Rmd YAML Template
		use R DS template
		Version Control options - Git/GitHub
		Data Storage Options - Git LFS
		Use bibtex for LaTex citations
		Xeus - C++ kernel for JupyterLab
		JupyterHub - server for running Jupyter notebooks.  
		JupyterLab Extensions
		Remember the webapp is the Production step

		Finish Descriptive Statistics Notebook - read "Index Numbers" chapter in book 
		
Information Dashboard / Web App
	
	Plotly's Dash
	Web App implementation - Django or Flask or Angular